{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FastVector This is a simple vector python package.","title":"Start"},{"location":"#fastvector","text":"This is a simple vector python package.","title":"FastVector"},{"location":"api/","text":"References Vector Class Vector2D Source code in fastvector/vector.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 @total_ordering class Vector2D : def __init__ ( self , x : SupportsFloat = 0.0 , y : SupportsFloat = 0.0 ) -> None : \"\"\"Create a vector with the given x and y values. Args: x: x-Value. y: y-Value. Raises: TypeError: If x or y are not a number. \"\"\" if isinstance ( x , numbers . Real ) and isinstance ( y , numbers . Real ): self . x = x self . y = y else : raise TypeError ( 'You must pass in int/float value for x and y!' ) def __repr__ ( self ) -> str : \"\"\"Return the vector representation. Returns: The representation of the vector. \"\"\" return f 'vector.Vector2D( { self . x } , { self . y } )' def __str__ ( self ) -> str : \"\"\"The vector as a string. Returns: The vector as a string. \"\"\" return f '( { self . x } , { self . y } )' def __abs__ ( self ) -> float : \"\"\"Return the length (magnitude) of the vector. Returns: Length of the vector. \"\"\" return sqrt ( pow ( self . x , 2 ) + pow ( self . y , 2 )) def __eq__ ( self , other_vector : object ) -> bool : \"\"\"Check if the vectors have the same values. Args: other_vector: Other vector (rhs) Returns: True, if the both vectors have the same values. False, else. \"\"\" if not isinstance ( other_vector , Vector2D ): return False return self . x == other_vector . x and self . y == other_vector . y def __lt__ ( self , other_vector : Vector2D ) -> bool : \"\"\"Check if the self is less than the other vector. Args: other_vector: Other vector (rhs). Returns: True, if the self is less than the other vector. False, else. \"\"\" if not isinstance ( other_vector , Vector2D ): raise TypeError ( 'You must pass in a Vector2D instance!' ) return abs ( self ) < abs ( other_vector ) def __add__ ( self , other_vector : Vector2D ) -> Vector2D : \"\"\"Returns the addition vector of the self and the other vector. Args: other_vector: Other vector (rhs). Returns: The addition vector of the self and the other vector. \"\"\" if not isinstance ( other_vector , Vector2D ): raise TypeError ( 'You must pass in a Vector2D instance!' ) x = self . x + other_vector . x y = self . y + other_vector . y return Vector2D ( x , y ) def __sub__ ( self , other_vector : Vector2D ) -> Vector2D : \"\"\"Return the subtraction vector of the self and the other vector. Args: other_vector: Other vector (rhs). Returns: The subtraction vector of the self and the other vector. \"\"\" if not isinstance ( other_vector , Vector2D ): raise TypeError ( 'You must pass in a Vector2D instance!' ) x = self . x - other_vector . x y = self . y - other_vector . y return Vector2D ( x , y ) def __mul__ ( self , other : Union [ Vector2D , SupportsFloat ] ) -> Union [ Vector2D , SupportsFloat ]: \"\"\"Return the multiplication of self and the other vector/number. Args: other: Other vector or scaler value (rhs) Raises: TypeError: Not int/float passed in. Returns: The multiplication of self and the other vector/number. \"\"\" if isinstance ( other , Vector2D ): result : SupportsFloat = self . x * other . x + self . y * other . y return result if not isinstance ( other , numbers . Real ): raise TypeError ( 'You must pass in an int/float!' ) return Vector2D ( self . x * other , self . y * other ) def __truediv__ ( self , other : SupportsFloat ) -> Vector2D : \"\"\"Return the multiplication of self and the other vector/number. Args: other: Other vector or scaler value (rhs). Raises: ValueError: Division by zero. TypeError: Not int/float passed in. Returns: The multiplication of self and the other vector/number. \"\"\" if not isinstance ( other , numbers . Real ): raise TypeError ( 'You must pass in an int/float!' ) return Vector2D ( self . x / other , self . y / other ) __abs__ () Return the length (magnitude) of the vector. Returns: Type Description float Length of the vector. Source code in fastvector/vector.py 44 45 46 47 48 49 50 def __abs__ ( self ) -> float : \"\"\"Return the length (magnitude) of the vector. Returns: Length of the vector. \"\"\" return sqrt ( pow ( self . x , 2 ) + pow ( self . y , 2 )) __add__ ( other_vector ) Returns the addition vector of the self and the other vector. Parameters: Name Type Description Default other_vector Vector2D Other vector (rhs). required Returns: Type Description Vector2D The addition vector of the self and the other vector. Source code in fastvector/vector.py 80 81 82 83 84 85 86 87 88 89 90 91 92 93 def __add__ ( self , other_vector : Vector2D ) -> Vector2D : \"\"\"Returns the addition vector of the self and the other vector. Args: other_vector: Other vector (rhs). Returns: The addition vector of the self and the other vector. \"\"\" if not isinstance ( other_vector , Vector2D ): raise TypeError ( 'You must pass in a Vector2D instance!' ) x = self . x + other_vector . x y = self . y + other_vector . y return Vector2D ( x , y ) __eq__ ( other_vector ) Check if the vectors have the same values. Parameters: Name Type Description Default other_vector object Other vector (rhs) required Returns: Type Description bool True, if the both vectors have the same values. bool False, else. Source code in fastvector/vector.py 52 53 54 55 56 57 58 59 60 61 62 63 64 def __eq__ ( self , other_vector : object ) -> bool : \"\"\"Check if the vectors have the same values. Args: other_vector: Other vector (rhs) Returns: True, if the both vectors have the same values. False, else. \"\"\" if not isinstance ( other_vector , Vector2D ): return False return self . x == other_vector . x and self . y == other_vector . y __init__ ( x = 0.0 , y = 0.0 ) Create a vector with the given x and y values. Parameters: Name Type Description Default x SupportsFloat x-Value. 0.0 y SupportsFloat y-Value. 0.0 Raises: Type Description TypeError If x or y are not a number. Source code in fastvector/vector.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 def __init__ ( self , x : SupportsFloat = 0.0 , y : SupportsFloat = 0.0 ) -> None : \"\"\"Create a vector with the given x and y values. Args: x: x-Value. y: y-Value. Raises: TypeError: If x or y are not a number. \"\"\" if isinstance ( x , numbers . Real ) and isinstance ( y , numbers . Real ): self . x = x self . y = y else : raise TypeError ( 'You must pass in int/float value for x and y!' ) __lt__ ( other_vector ) Check if the self is less than the other vector. Parameters: Name Type Description Default other_vector Vector2D Other vector (rhs). required Returns: Type Description bool True, if the self is less than the other vector. bool False, else. Source code in fastvector/vector.py 66 67 68 69 70 71 72 73 74 75 76 77 78 def __lt__ ( self , other_vector : Vector2D ) -> bool : \"\"\"Check if the self is less than the other vector. Args: other_vector: Other vector (rhs). Returns: True, if the self is less than the other vector. False, else. \"\"\" if not isinstance ( other_vector , Vector2D ): raise TypeError ( 'You must pass in a Vector2D instance!' ) return abs ( self ) < abs ( other_vector ) __mul__ ( other ) Return the multiplication of self and the other vector/number. Parameters: Name Type Description Default other Union [ Vector2D , SupportsFloat ] Other vector or scaler value (rhs) required Raises: Type Description TypeError Not int/float passed in. Returns: Type Description Union [ Vector2D , SupportsFloat ] The multiplication of self and the other vector/number. Source code in fastvector/vector.py 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 def __mul__ ( self , other : Union [ Vector2D , SupportsFloat ] ) -> Union [ Vector2D , SupportsFloat ]: \"\"\"Return the multiplication of self and the other vector/number. Args: other: Other vector or scaler value (rhs) Raises: TypeError: Not int/float passed in. Returns: The multiplication of self and the other vector/number. \"\"\" if isinstance ( other , Vector2D ): result : SupportsFloat = self . x * other . x + self . y * other . y return result if not isinstance ( other , numbers . Real ): raise TypeError ( 'You must pass in an int/float!' ) return Vector2D ( self . x * other , self . y * other ) __repr__ () Return the vector representation. Returns: Type Description str The representation of the vector. Source code in fastvector/vector.py 28 29 30 31 32 33 34 def __repr__ ( self ) -> str : \"\"\"Return the vector representation. Returns: The representation of the vector. \"\"\" return f 'vector.Vector2D( { self . x } , { self . y } )' __str__ () The vector as a string. Returns: Type Description str The vector as a string. Source code in fastvector/vector.py 36 37 38 39 40 41 42 def __str__ ( self ) -> str : \"\"\"The vector as a string. Returns: The vector as a string. \"\"\" return f '( { self . x } , { self . y } )' __sub__ ( other_vector ) Return the subtraction vector of the self and the other vector. Parameters: Name Type Description Default other_vector Vector2D Other vector (rhs). required Returns: Type Description Vector2D The subtraction vector of the self and the other vector. Source code in fastvector/vector.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 def __sub__ ( self , other_vector : Vector2D ) -> Vector2D : \"\"\"Return the subtraction vector of the self and the other vector. Args: other_vector: Other vector (rhs). Returns: The subtraction vector of the self and the other vector. \"\"\" if not isinstance ( other_vector , Vector2D ): raise TypeError ( 'You must pass in a Vector2D instance!' ) x = self . x - other_vector . x y = self . y - other_vector . y return Vector2D ( x , y ) __truediv__ ( other ) Return the multiplication of self and the other vector/number. Parameters: Name Type Description Default other SupportsFloat Other vector or scaler value (rhs). required Raises: Type Description ValueError Division by zero. TypeError Not int/float passed in. Returns: Type Description Vector2D The multiplication of self and the other vector/number. Source code in fastvector/vector.py 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 def __truediv__ ( self , other : SupportsFloat ) -> Vector2D : \"\"\"Return the multiplication of self and the other vector/number. Args: other: Other vector or scaler value (rhs). Raises: ValueError: Division by zero. TypeError: Not int/float passed in. Returns: The multiplication of self and the other vector/number. \"\"\" if not isinstance ( other , numbers . Real ): raise TypeError ( 'You must pass in an int/float!' ) return Vector2D ( self . x / other , self . y / other )","title":"API"},{"location":"api/#references","text":"","title":"References"},{"location":"api/#vector-class","text":"","title":"Vector Class"},{"location":"api/#fastvector.vector.Vector2D","text":"Source code in fastvector/vector.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 @total_ordering class Vector2D : def __init__ ( self , x : SupportsFloat = 0.0 , y : SupportsFloat = 0.0 ) -> None : \"\"\"Create a vector with the given x and y values. Args: x: x-Value. y: y-Value. Raises: TypeError: If x or y are not a number. \"\"\" if isinstance ( x , numbers . Real ) and isinstance ( y , numbers . Real ): self . x = x self . y = y else : raise TypeError ( 'You must pass in int/float value for x and y!' ) def __repr__ ( self ) -> str : \"\"\"Return the vector representation. Returns: The representation of the vector. \"\"\" return f 'vector.Vector2D( { self . x } , { self . y } )' def __str__ ( self ) -> str : \"\"\"The vector as a string. Returns: The vector as a string. \"\"\" return f '( { self . x } , { self . y } )' def __abs__ ( self ) -> float : \"\"\"Return the length (magnitude) of the vector. Returns: Length of the vector. \"\"\" return sqrt ( pow ( self . x , 2 ) + pow ( self . y , 2 )) def __eq__ ( self , other_vector : object ) -> bool : \"\"\"Check if the vectors have the same values. Args: other_vector: Other vector (rhs) Returns: True, if the both vectors have the same values. False, else. \"\"\" if not isinstance ( other_vector , Vector2D ): return False return self . x == other_vector . x and self . y == other_vector . y def __lt__ ( self , other_vector : Vector2D ) -> bool : \"\"\"Check if the self is less than the other vector. Args: other_vector: Other vector (rhs). Returns: True, if the self is less than the other vector. False, else. \"\"\" if not isinstance ( other_vector , Vector2D ): raise TypeError ( 'You must pass in a Vector2D instance!' ) return abs ( self ) < abs ( other_vector ) def __add__ ( self , other_vector : Vector2D ) -> Vector2D : \"\"\"Returns the addition vector of the self and the other vector. Args: other_vector: Other vector (rhs). Returns: The addition vector of the self and the other vector. \"\"\" if not isinstance ( other_vector , Vector2D ): raise TypeError ( 'You must pass in a Vector2D instance!' ) x = self . x + other_vector . x y = self . y + other_vector . y return Vector2D ( x , y ) def __sub__ ( self , other_vector : Vector2D ) -> Vector2D : \"\"\"Return the subtraction vector of the self and the other vector. Args: other_vector: Other vector (rhs). Returns: The subtraction vector of the self and the other vector. \"\"\" if not isinstance ( other_vector , Vector2D ): raise TypeError ( 'You must pass in a Vector2D instance!' ) x = self . x - other_vector . x y = self . y - other_vector . y return Vector2D ( x , y ) def __mul__ ( self , other : Union [ Vector2D , SupportsFloat ] ) -> Union [ Vector2D , SupportsFloat ]: \"\"\"Return the multiplication of self and the other vector/number. Args: other: Other vector or scaler value (rhs) Raises: TypeError: Not int/float passed in. Returns: The multiplication of self and the other vector/number. \"\"\" if isinstance ( other , Vector2D ): result : SupportsFloat = self . x * other . x + self . y * other . y return result if not isinstance ( other , numbers . Real ): raise TypeError ( 'You must pass in an int/float!' ) return Vector2D ( self . x * other , self . y * other ) def __truediv__ ( self , other : SupportsFloat ) -> Vector2D : \"\"\"Return the multiplication of self and the other vector/number. Args: other: Other vector or scaler value (rhs). Raises: ValueError: Division by zero. TypeError: Not int/float passed in. Returns: The multiplication of self and the other vector/number. \"\"\" if not isinstance ( other , numbers . Real ): raise TypeError ( 'You must pass in an int/float!' ) return Vector2D ( self . x / other , self . y / other )","title":"Vector2D"},{"location":"api/#fastvector.vector.Vector2D.__abs__","text":"Return the length (magnitude) of the vector. Returns: Type Description float Length of the vector. Source code in fastvector/vector.py 44 45 46 47 48 49 50 def __abs__ ( self ) -> float : \"\"\"Return the length (magnitude) of the vector. Returns: Length of the vector. \"\"\" return sqrt ( pow ( self . x , 2 ) + pow ( self . y , 2 ))","title":"__abs__()"},{"location":"api/#fastvector.vector.Vector2D.__add__","text":"Returns the addition vector of the self and the other vector. Parameters: Name Type Description Default other_vector Vector2D Other vector (rhs). required Returns: Type Description Vector2D The addition vector of the self and the other vector. Source code in fastvector/vector.py 80 81 82 83 84 85 86 87 88 89 90 91 92 93 def __add__ ( self , other_vector : Vector2D ) -> Vector2D : \"\"\"Returns the addition vector of the self and the other vector. Args: other_vector: Other vector (rhs). Returns: The addition vector of the self and the other vector. \"\"\" if not isinstance ( other_vector , Vector2D ): raise TypeError ( 'You must pass in a Vector2D instance!' ) x = self . x + other_vector . x y = self . y + other_vector . y return Vector2D ( x , y )","title":"__add__()"},{"location":"api/#fastvector.vector.Vector2D.__eq__","text":"Check if the vectors have the same values. Parameters: Name Type Description Default other_vector object Other vector (rhs) required Returns: Type Description bool True, if the both vectors have the same values. bool False, else. Source code in fastvector/vector.py 52 53 54 55 56 57 58 59 60 61 62 63 64 def __eq__ ( self , other_vector : object ) -> bool : \"\"\"Check if the vectors have the same values. Args: other_vector: Other vector (rhs) Returns: True, if the both vectors have the same values. False, else. \"\"\" if not isinstance ( other_vector , Vector2D ): return False return self . x == other_vector . x and self . y == other_vector . y","title":"__eq__()"},{"location":"api/#fastvector.vector.Vector2D.__init__","text":"Create a vector with the given x and y values. Parameters: Name Type Description Default x SupportsFloat x-Value. 0.0 y SupportsFloat y-Value. 0.0 Raises: Type Description TypeError If x or y are not a number. Source code in fastvector/vector.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 def __init__ ( self , x : SupportsFloat = 0.0 , y : SupportsFloat = 0.0 ) -> None : \"\"\"Create a vector with the given x and y values. Args: x: x-Value. y: y-Value. Raises: TypeError: If x or y are not a number. \"\"\" if isinstance ( x , numbers . Real ) and isinstance ( y , numbers . Real ): self . x = x self . y = y else : raise TypeError ( 'You must pass in int/float value for x and y!' )","title":"__init__()"},{"location":"api/#fastvector.vector.Vector2D.__lt__","text":"Check if the self is less than the other vector. Parameters: Name Type Description Default other_vector Vector2D Other vector (rhs). required Returns: Type Description bool True, if the self is less than the other vector. bool False, else. Source code in fastvector/vector.py 66 67 68 69 70 71 72 73 74 75 76 77 78 def __lt__ ( self , other_vector : Vector2D ) -> bool : \"\"\"Check if the self is less than the other vector. Args: other_vector: Other vector (rhs). Returns: True, if the self is less than the other vector. False, else. \"\"\" if not isinstance ( other_vector , Vector2D ): raise TypeError ( 'You must pass in a Vector2D instance!' ) return abs ( self ) < abs ( other_vector )","title":"__lt__()"},{"location":"api/#fastvector.vector.Vector2D.__mul__","text":"Return the multiplication of self and the other vector/number. Parameters: Name Type Description Default other Union [ Vector2D , SupportsFloat ] Other vector or scaler value (rhs) required Raises: Type Description TypeError Not int/float passed in. Returns: Type Description Union [ Vector2D , SupportsFloat ] The multiplication of self and the other vector/number. Source code in fastvector/vector.py 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 def __mul__ ( self , other : Union [ Vector2D , SupportsFloat ] ) -> Union [ Vector2D , SupportsFloat ]: \"\"\"Return the multiplication of self and the other vector/number. Args: other: Other vector or scaler value (rhs) Raises: TypeError: Not int/float passed in. Returns: The multiplication of self and the other vector/number. \"\"\" if isinstance ( other , Vector2D ): result : SupportsFloat = self . x * other . x + self . y * other . y return result if not isinstance ( other , numbers . Real ): raise TypeError ( 'You must pass in an int/float!' ) return Vector2D ( self . x * other , self . y * other )","title":"__mul__()"},{"location":"api/#fastvector.vector.Vector2D.__repr__","text":"Return the vector representation. Returns: Type Description str The representation of the vector. Source code in fastvector/vector.py 28 29 30 31 32 33 34 def __repr__ ( self ) -> str : \"\"\"Return the vector representation. Returns: The representation of the vector. \"\"\" return f 'vector.Vector2D( { self . x } , { self . y } )'","title":"__repr__()"},{"location":"api/#fastvector.vector.Vector2D.__str__","text":"The vector as a string. Returns: Type Description str The vector as a string. Source code in fastvector/vector.py 36 37 38 39 40 41 42 def __str__ ( self ) -> str : \"\"\"The vector as a string. Returns: The vector as a string. \"\"\" return f '( { self . x } , { self . y } )'","title":"__str__()"},{"location":"api/#fastvector.vector.Vector2D.__sub__","text":"Return the subtraction vector of the self and the other vector. Parameters: Name Type Description Default other_vector Vector2D Other vector (rhs). required Returns: Type Description Vector2D The subtraction vector of the self and the other vector. Source code in fastvector/vector.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 def __sub__ ( self , other_vector : Vector2D ) -> Vector2D : \"\"\"Return the subtraction vector of the self and the other vector. Args: other_vector: Other vector (rhs). Returns: The subtraction vector of the self and the other vector. \"\"\" if not isinstance ( other_vector , Vector2D ): raise TypeError ( 'You must pass in a Vector2D instance!' ) x = self . x - other_vector . x y = self . y - other_vector . y return Vector2D ( x , y )","title":"__sub__()"},{"location":"api/#fastvector.vector.Vector2D.__truediv__","text":"Return the multiplication of self and the other vector/number. Parameters: Name Type Description Default other SupportsFloat Other vector or scaler value (rhs). required Raises: Type Description ValueError Division by zero. TypeError Not int/float passed in. Returns: Type Description Vector2D The multiplication of self and the other vector/number. Source code in fastvector/vector.py 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 def __truediv__ ( self , other : SupportsFloat ) -> Vector2D : \"\"\"Return the multiplication of self and the other vector/number. Args: other: Other vector or scaler value (rhs). Raises: ValueError: Division by zero. TypeError: Not int/float passed in. Returns: The multiplication of self and the other vector/number. \"\"\" if not isinstance ( other , numbers . Real ): raise TypeError ( 'You must pass in an int/float!' ) return Vector2D ( self . x / other , self . y / other )","title":"__truediv__()"}]}